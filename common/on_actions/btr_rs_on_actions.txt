# on_game_start = {
# 	events = {
# 		planetarystations.1
# 		planetarystations.2
# 		planetarystations.4
# 		planetarystations.5
# 	}
# }

# No scope, like on_game_start
# Does not run when loading MP saves due to OOS concerns
on_single_player_save_game_load = {
	events = {
	}
}

# After closing RS menu
on_applying_rs_settings = {
	events = {
	}
}

# No scope, like on_game_start
on_monthly_pulse = {
	events = {
	}
}

# No scope, like on_game_start
on_yearly_pulse = {
	events = {
	}
}

# No scope, like on_game_start
on_five_year_pulse = {
	events = {
		planetarystations_action.8
	}
}

# Triggers country_event for the defender upon victory
# Root = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_win = {
	events = {
		planetarystations_colony_event.14
		planetarystations_colony_event.18
		planetarystations_colony_event.38
	}
}

# Triggers country_event for the defender upon defeat
# This = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_lose = {
	events = {
	}
}

# Triggers when ground combat starts
# This = planet
# From = country attacking
on_ground_combat_started = {
	events = {
	}
}

# Planet has taken damage from orbital bombardment - Damage is applied daily
# This = Planet
# From = Bombarder
on_planet_bombarded = {
	events = {
		planetarystations_action.1
	}
}

# A ship has surveyed a planet.
# Scope = Ship
# From = Planet
on_survey = {
	events = {
	}
}

#From = Planet/Starbase/Megastructure scope
#This = Fleet scope
on_fleet_enter_orbit = {
	events = {
	}
}

# A country has gained a surveyed status on a planet. Happens after "on_survey" if a science ship surveyed a planet.
# Root = Planet
# From = Country
# FromFrom = Fleet of the science ship that surveyed it, if any
on_planet_surveyed = {
	events = {
	}
}

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		planetarystations_action.10
	}
}

on_colony_1_year_old = {
	events = {
	}

	random_events = {
		300 = 0
	}
}

# X years has passed since a planet was colonized (won't trigger on empire homeworld)
on_colony_2_years_old = {
	events = {
	}
}

# Fires for each planet every 5 years (counting up from colonisation date, includes home planet)
on_colony_5_year_pulse = {
	events = {
		planetarystations_action.3 # Transferring prisoners
	}
}

on_colony_10_year_pulse = {
	events = {
		planetarystations_colony_event.1
		planetarystations_action.7 #Apotheosis for non-necrophage pops to necrophage
	}
}

# A colony has been destroyed. Called just before owner and controller is cleared
# Scope = Planet
on_colony_destroyed = {
	events = {
	}
}

#Fired whenever a new owner is set for a planet,
#be it after a war or through a trade
#From = Country scope (new owner)
#This = Planet scope
on_planet_transfer = {
	events = {
		planetarystations_action.5
	}
}

# A planets controller becomes a country not the same as the owner.
# Root = Planet
# From = Planet Owner
# FromFrom = Planet Controller (the one occupying)
on_planet_occupied = {
	events = {
		planetarystations_colony_event.36
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_victim = {
	events = {
	}
}

# From = system
# FromFrom = country (new owner)
# This = country (previous owner)
on_system_lost = {
	events = {
	}
}

# From = system
# FromFrom = country (previous owner)
# This = country (new owner)
on_system_gained = {
	events = {
	}
}

#You have changed the location of your capital. Also called when a country's capital is first set e.g. during galaxy creation (but then FROM is not set)
#this/root = new capital
#from = old capital
on_capital_changed = {
	events = {
	}
}

# Planet has been terraformed
# This = Planet
# From = Terraformer
on_terraforming_complete = {
    events = {
    }
}

# Planet has changed planet class in whatever way. Note that this is also called during galaxy creation in some places.
# This = Planet
on_planet_class_changed = {
	events = {
	}
}

#A building construction has been completed.
# This = Planet
on_building_complete = {
	events = {
	}
}

# A building construction has finished, replacing another building.
# This = Planet
on_building_replaced = {
	events = {
	}
}

# A building construction has demolished.
# This = Planet
on_building_demolished = {
	events = {
	}
}

# Called during empire initialization when starting a new game if has_secondary_species game rule is true.
# Called before empire_init_create_capital_pops.
# scope: planet
# from: founder species
# fromfrom: secondary species (if exists)
empire_init_capital_planet = {
	events = {

		# at this point the species might have changed (because we added traits), so FROMFROM might not be the secondary species anymore
	}
}
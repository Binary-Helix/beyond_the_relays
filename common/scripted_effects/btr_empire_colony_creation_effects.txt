generate_asari_republics_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = asari_republics_system
		}
		set_global_flag = asari_republics_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = sanves_planet
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_sanves_colony_buildings = yes
				generate_asr_sanves_pops = yes
				save_global_event_target_as = asr_sanves_colony
				log = "Asari Republics Colony (Sanves) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = lusia_planet
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_lusia_colony_buildings = yes
				generate_asr_lusia_pops = yes
				save_global_event_target_as = asr_lusia_colony
				log = "Asari Republics Colony (Lusia) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = niacal_planet
				}
				set_owner = event_target:asari_republics
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_niacal_colony_buildings = yes
				generate_asr_niacal_pops = yes
				save_global_event_target_as = asr_niacal_colony
				log = "Asari Republics Colony (Niacal) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = espota_station
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_espota_station_buildings = yes
				generate_asr_espota_pops = yes
				save_global_event_target_as = asr_espota_colony
				log = "Asari Republics Colony (Espota Station) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = agessia_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_agessia_colony_buildings = yes
				generate_asr_agessia_pops = yes
				save_global_event_target_as = asr_agessia_colony
				log = "Asari Republics Colony (Agessia) Spawned"
			}			
			if = {
				limit = {
					has_planet_flag = hyetiana_planet
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_hyetiana_colony_buildings = yes
				generate_asr_hyetiana_pops = yes
				save_global_event_target_as = asr_hyetiana_colony
				log = "Asari Republics Colony (Hyetiana) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = nevos_planet
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_nevos_colony_buildings = yes
				generate_asr_nevos_pops = yes
				save_global_event_target_as = asr_nevos_colony
				log = "Asari Republics Colony (Nevos) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = cyone_planet
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_cyone_colony_buildings = yes
				generate_asr_cyone_pops = yes
				save_global_event_target_as = asr_cyone_colony
				log = "Asari Republics Colony (Cyone) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = trategos_planet
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_trategos_colony_buildings = yes
				generate_asr_trategos_pops = yes
				save_global_event_target_as = asr_trategos_colony
				log = "Asari Republics Colony (Trategos) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = lesuss_planet
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_lesuss_colony_buildings = yes
				generate_asr_lesuss_pops = yes
				save_global_event_target_as = asr_lesuss_colony
				log = "Asari Republics Colony (Lesuss) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = malkos_planet
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_malkos_colony_buildings = yes
				generate_asr_malkos_pops = yes
				save_global_event_target_as = asr_malkos_colony
				log = "Asari Republics Colony (Malkos) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = charias_planet
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_charias_colony_buildings = yes
				generate_asr_charias_pops = yes
				save_global_event_target_as = asr_charias_colony
				log = "Asari Republics Colony (Charias) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = diras_planet
				}
				set_owner = event_target:asari_republics
				create_colony = {
					owner = event_target:asari_republics
					species = event_target:asariSpecies
				}
				generate_asr_diras_colony_buildings = yes
				generate_asr_diras_pops = yes
				save_global_event_target_as = asr_diras_colony
				log = "Asari Republics Colony (Diras) Spawned"
			}															
		}
	}	
}

generate_salarian_union_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = salarian_union_system
		}
		set_global_flag = salarian_union_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = mannovai_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_mannovai_colony_buildings = yes
				generate_sal_mannovai_pops = yes
				save_global_event_target_as = sal_sanves_colony
				log = "Salarian Union Colony (Mannovai) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = nasurn_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_nasurn_colony_buildings = yes
				generate_sal_nasurn_pops = yes
				save_global_event_target_as = sal_nasurn_colony
				log = "Salarian Union Colony (Nasurn) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = jaeto_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_jaeto_colony_buildings = yes
				generate_sal_jaeto_pops = yes
				save_global_event_target_as = sal_jaeto_colony
				log = "Salarian Union Colony (Jaeto) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = gataly_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_gataly_colony_buildings = yes
				generate_sal_gataly_pops = yes
				save_global_event_target_as = sal_gataly_colony
				log = "Salarian Union Colony (Gataly) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = senoquol_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_senoquol_colony_buildings = yes
				generate_sal_senoquol_pops = yes
				save_global_event_target_as = sal_senoquol_colony
				log = "Salarian Union Colony (Senoquol) Spawned"
			}			
			if = {
				limit = {
					has_planet_flag = saetabelo_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_saetabelo_colony_buildings = yes
				generate_sal_saetabelo_pops = yes
				save_global_event_target_as = sal_saetabelo_colony
				log = "Salarian Union Colony (Saetabelo) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = voya_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_voya_colony_buildings = yes
				generate_sal_voya_pops = yes
				save_global_event_target_as = sal_voya_colony
				log = "Salarian Union Colony (Voya) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = gorot_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_gorot_colony_buildings = yes
				generate_sal_gorot_pops = yes
				save_global_event_target_as = sal_gorot_colony
				log = "Salarian Union Colony (Gorot) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = olor_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_olor_colony_buildings = yes
				generate_sal_olor_pops = yes
				save_global_event_target_as = sal_olor_colony
				log = "Salarian Union Colony (Olor) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = rannandril_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_rannandril_colony_buildings = yes
				generate_sal_rannandril_pops = yes
				save_global_event_target_as = sal_rannandril_colony
				log = "Salarian Union Colony (Rannandril) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = dagnes_planet
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_dagnes_colony_buildings = yes
				generate_sal_dagnes_pops = yes
				save_global_event_target_as = sal_dagnes_colony
				log = "Salarian Union Colony (Dagnes) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = lorala_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_lorala_colony_buildings = yes
				generate_sal_lorala_pops = yes
				save_global_event_target_as = sal_lorala_colony
				log = "Salarian Union Colony (Lor'ala) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = jarrahe_station
				}
				set_owner = event_target:salarian_union
				create_colony = {
					owner = event_target:salarian_union
					species = event_target:salarianSpecies
				}
				generate_sal_jarrahe_colony_buildings = yes
				generate_sal_jarrahe_pops = yes
				save_global_event_target_as = sal_jarrahe_colony
				log = "Salarian Union Colony (Jarrahe Station) Spawned"
			}															
		}
	}	
}

generate_turian_hierarchy_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = turian_hierarchy_system
		}
		set_global_flag = turian_hierarchy_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = parthia_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_parthia_colony_buildings = yes
				generate_tur_parthia_pops = yes
				save_global_event_target_as = tur_parthia_colony
				log = "Turian Hierarchy Colony (Parthia) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = oma_ker_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_oma_ker_colony_buildings = yes
				generate_tur_oma_ker_pops = yes
				save_global_event_target_as = tur_oma_ker_colony
				log = "Turian Hierarchy Colony (Oma Ker) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = digeris_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_digeris_colony_buildings = yes
				generate_tur_digeris_pops = yes
				save_global_event_target_as = tur_digeris_colony
				log = "Turian Hierarchy Colony (Digeris) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = taetrus_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_taetrus_colony_buildings = yes
				generate_tur_taetrus_pops = yes
				save_global_event_target_as = tur_taetrus_colony
				log = "Turian Hierarchy Colony (Taetrus) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = tracmus_duxes_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_tracmus_duxes_colony_buildings = yes
				generate_tur_tracmus_duxes_pops = yes
				save_global_event_target_as = tur_tracmus_duxes_colony
				log = "Turian Hierarchy Colony (Tracmus Duxes) Spawned"
			}			
			if = {
				limit = {
					has_planet_flag = invictus_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_invictus_colony_buildings = yes
				generate_tur_invictus_pops = yes
				save_global_event_target_as = tur_invictus_colony
				log = "Turian Hierarchy Colony (Invictus) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = gellix_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_gellix_colony_buildings = yes
				generate_tur_gellix_pops = yes
				save_global_event_target_as = tur_gellix_colony
				log = "Turian Hierarchy Colony (Gellix) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = magna_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_magna_colony_buildings = yes
				generate_tur_magna_pops = yes
				save_global_event_target_as = tur_magna_colony
				log = "Turian Hierarchy Colony (Magna) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = edessan_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_edessan_colony_buildings = yes
				generate_tur_edessan_pops = yes
				save_global_event_target_as = tur_edessan_colony
				log = "Turian Hierarchy Colony (Edessan) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = aephus_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_aephus_colony_buildings = yes
				generate_tur_aephus_pops = yes
				save_global_event_target_as = tur_aephus_colony
				log = "Turian Hierarchy Colony (Aephus) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = epyrus_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_epyrus_colony_buildings = yes
				generate_tur_epyrus_pops = yes
				save_global_event_target_as = tur_epyrus_colony
				log = "Turian Hierarchy Colony (Epyrus) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = chatti_planet
				}
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_chatti_colony_buildings = yes
				generate_tur_chatti_pops = yes
				save_global_event_target_as = tur_chatti_colony
				log = "Turian Hierarchy Colony (Chatti) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = menae_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_menae_colony_buildings = yes
				generate_tur_menae_pops = yes
				save_global_event_target_as = tur_menae_colony
				log = "Turian Hierarchy Colony (Menae Colony) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = pheiros_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_pheiros_colony_buildings = yes
				generate_tur_pheiros_pops = yes
				save_global_event_target_as = tur_pheiros_colony
				log = "Turian Hierarchy Colony (Pheiros Colony) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = nanus_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_nanus_colony_buildings = yes
				generate_tur_nanus_pops = yes
				save_global_event_target_as = tur_nanus_colony
				log = "Turian Hierarchy Colony (Nanus Colony) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = nimines_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_nimines_colony_buildings = yes
				generate_tur_nimines_pops = yes
				save_global_event_target_as = tur_nimines_colony
				log = "Turian Hierarchy Colony (Nimines Colony) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = maitrum_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:turian_hierarchy
				create_colony = {
					owner = event_target:turian_hierarchy
					species = event_target:turianSpecies
				}
				generate_tur_maitrum_colony_buildings = yes
				generate_tur_maitrum_pops = yes
				save_global_event_target_as = tur_maitrum_colony
				log = "Turian Hierarchy Colony (Maitrum Colony) Spawned"
			}																			
		}
	}	
}

generate_systems_alliance_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = systems_alliance_system
		}
		set_global_flag = systems_alliance_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = luna_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_luna_colony_buildings = yes
				generate_sys_luna_pops = yes
				save_global_event_target_as = sys_luna_colony
				log = "Systems Alliance Colony (Luna) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = mars_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes

				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_mars_colony_buildings = yes
				generate_sys_mars_pops = yes
				save_global_event_target_as = sys_mars_colony
				log = "Systems Alliance Colony (Mars) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = benning_planet
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_benning_colony_buildings = yes
				generate_sys_benning_pops = yes
				save_global_event_target_as = sys_benning_colony
				log = "Systems Alliance Colony (Benning) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = demeter_planet
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_demeter_colony_buildings = yes
				generate_sys_demeter_pops = yes
				save_global_event_target_as = sys_demeter_colony
				log = "Systems Alliance Colony (Demeter) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = sirona_planet
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_sirona_colony_buildings = yes
				generate_sys_sirona_pops = yes
				save_global_event_target_as = sys_sirona_colony
				log = "Systems Alliance Colony (Sirona) Spawned"
			}			
			if = {
				limit = {
					has_planet_flag = elysium_planet
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_elysium_colony_buildings = yes
				generate_sys_elysium_pops = yes
				save_global_event_target_as = sys_elysium_colony
				log = "Systems Alliance Colony (Elysium) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = eden_prime_planet
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_eden_prime_colony_buildings = yes
				generate_sys_eden_prime_pops = yes
				save_global_event_target_as = sys_eden_prime_colony
				log = "Systems Alliance Colony (Eden Prime) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = shanxi_planet
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_shanxi_colony_buildings = yes
				generate_sys_shanxi_pops = yes
				save_global_event_target_as = sys_shanxi_colony
				log = "Systems Alliance Colony (Shanxi) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = bekenstein_planet
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_bekenstein_colony_buildings = yes
				generate_sys_bekenstein_pops = yes
				save_global_event_target_as = sys_bekenstein_colony
				log = "Systems Alliance Colony (Bekenstein) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = terra_nova_planet
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_terra_nova_colony_buildings = yes
				generate_sys_terra_nova_pops = yes
				save_global_event_target_as = sys_terra_nova_colony
				log = "Systems Alliance Colony (Terra Nova) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = yandoa_planet
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_yandoa_colony_buildings = yes
				generate_sys_yandoa_pops = yes
				save_global_event_target_as = sys_yandoa_colony
				log = "Systems Alliance Colony (Yandoa) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = mindoir_planet
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_mindoir_colony_buildings = yes
				generate_sys_mindoir_pops = yes
				save_global_event_target_as = sys_mindoir_colony
				log = "Systems Alliance Colony (Mindoir) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = tyr_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_tyr_colony_buildings = yes
				generate_sys_tyr_pops = yes
				save_global_event_target_as = sys_tyr_colony
				log = "Systems Alliance Colony (Tyr Colony) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = arcturus_station
				}
				set_owner = event_target:systems_alliance
				create_colony = {
					owner = event_target:systems_alliance
					species = event_target:humanSpecies
				}
				generate_sys_arcturus_station_buildings = yes
				generate_sys_arcturus_station_pops = yes
				save_global_event_target_as = sys_arcturus_station
				log = "Systems Alliance Colony (Arcturus Station) Spawned"
			}														
		}
	}	
}

generate_courts_of_dekuuna_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = courts_of_dekuuna_system
		}
		set_global_flag = courts_of_dekuuna_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = ekuuna_planet
				}
				set_owner = event_target:courts_of_dekuuna
				create_colony = {
					owner = event_target:courts_of_dekuuna
					species = event_target:elcorSpecies
				}
				generate_cod_ekuuna_colony_buildings = yes
				generate_cod_ekuuna_pops = yes
				save_global_event_target_as = sys_ekuuna_colony
				log = "Courts of Dekuuna Colony (Ekuuna) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = jurdal_planet
				}
				set_owner = event_target:courts_of_dekuuna
				create_colony = {
					owner = event_target:courts_of_dekuuna
					species = event_target:elcorSpecies
				}
				generate_cod_jurdal_colony_buildings = yes
				generate_cod_jurdal_pops = yes
				save_global_event_target_as = sys_jurdal_colony
				log = "Courts of Dekuuna Colony (Jurdal) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = yapolam_planet
				}
				set_owner = event_target:courts_of_dekuuna
				create_colony = {
					owner = event_target:courts_of_dekuuna
					species = event_target:elcorSpecies
				}
				generate_cod_yapolam_colony_buildings = yes
				generate_cod_yapolam_pops = yes
				save_global_event_target_as = sys_yapolam_colony
				log = "Courts of Dekuuna Colony (Yapolam) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = oltan_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:courts_of_dekuuna
				create_colony = {
					owner = event_target:courts_of_dekuuna
					species = event_target:elcorSpecies
				}
				generate_cod_oltan_colony_buildings = yes
				generate_cod_oltan_pops = yes
				save_global_event_target_as = sys_oltan_colony
				log = "Courts of Dekuuna Colony (Oltan) Spawned"
			}												
		}
	}	
}

generate_vol_protectorate_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = vol_protectorate_system
		}
		set_global_flag = vol_protectorate_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = maskawa_planet
				}
				set_owner = event_target:vol_protectorate
				create_colony = {
					owner = event_target:vol_protectorate
					species = event_target:volusSpecies
				}
				generate_vol_maskawa_colony_buildings = yes
				generate_vol_maskawa_pops = yes
				save_global_event_target_as = sys_maskawa_colony
				log = "Vol Protectorate Colony (Maskawa) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = daleon_planet
				}
				set_owner = event_target:vol_protectorate
				create_colony = {
					owner = event_target:vol_protectorate
					species = event_target:volusSpecies
				}
				generate_vol_daleon_colony_buildings = yes
				generate_vol_daleon_pops = yes
				save_global_event_target_as = sys_daleon_colony
				log = "Vol Protectorate Colony (Daleon) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = walden_planet
				}
				set_owner = event_target:vol_protectorate
				create_colony = {
					owner = event_target:vol_protectorate
					species = event_target:volusSpecies
				}
				generate_vol_walden_colony_buildings = yes
				generate_vol_walden_pops = yes
				save_global_event_target_as = sys_walden_colony
				log = "Vol Protectorate Colony (Walden) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = salau_planet
				}
				set_owner = event_target:vol_protectorate
				create_colony = {
					owner = event_target:vol_protectorate
					species = event_target:volusSpecies
				}
				generate_vol_salau_colony_buildings = yes
				generate_vol_salau_pops = yes
				save_global_event_target_as = sys_salau_colony
				log = "Vol Protectorate Colony (Salau) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = tau_tram_planet
				}
				set_owner = event_target:vol_protectorate
				create_colony = {
					owner = event_target:vol_protectorate
					species = event_target:volusSpecies
				}
				generate_vol_tau_tram_colony_buildings = yes
				generate_vol_tau_tram_pops = yes
				save_global_event_target_as = sys_tautram_colony
				log = "Vol Protectorate Colony (Tau Tram) Spawned"
			}		
			if = {
				limit = {
					has_planet_flag = doldit_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:vol_protectorate
				create_colony = {
					owner = event_target:vol_protectorate
					species = event_target:volusSpecies
				}
				generate_vol_doldit_colony_buildings = yes
				generate_vol_doldit_pops = yes
				save_global_event_target_as = sys_doldit_colony
				log = "Vol Protectorate Colony (Doldit a) Spawned"
			}										
		}
	}	
}

generate_illuminated_primacy_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = illuminated_primacy_system
		}
		set_global_flag = illuminated_primacy_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = acodu_planet
				}
				set_owner = event_target:illuminated_primacy
				create_colony = {
					owner = event_target:illuminated_primacy
					species = event_target:hanarSpecies
				}
				generate_han_acodu_colony_buildings = yes
				generate_han_acodu_pops = yes
				generate_han_acodu_drell_pops = yes
				save_global_event_target_as = sys_acodu_colony
				log = "Illuminated Primacy Colony (Acodu) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = belan_planet
				}
				set_owner = event_target:illuminated_primacy
				create_colony = {
					owner = event_target:illuminated_primacy
					species = event_target:hanarSpecies
				}
				generate_han_belan_colony_buildings = yes
				generate_han_belan_pops = yes
				generate_han_belan_drell_pops = yes
				save_global_event_target_as = sys_belan_colony
				log = "Illuminated Primacy Colony (Belan) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = zahni_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:illuminated_primacy
				create_colony = {
					owner = event_target:illuminated_primacy
					species = event_target:hanarSpecies
				}
				generate_han_zahni_colony_buildings = yes
				generate_han_zahni_pops = yes
				generate_han_zahni_drell_pops = yes
				save_global_event_target_as = sys_zahni_colony
				log = "Illuminated Primacy Colony (Zahni) Spawned"
			}									
		}
	}	
}

generate_hegemony_of_kharshan_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = hegemony_of_kharshan_system
		}
		set_global_flag = hegemony_of_kharshan_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = bira_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_bira_colony_buildings = yes
				generate_bat_bira_pops = yes
				save_global_event_target_as = sys_bira_colony
				log = "Hegemony of Khar'shan Colony (Bira) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = erszbat_planet
				}
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_erszbat_colony_buildings = yes
				generate_bat_erszbat_pops = yes
				save_global_event_target_as = sys_erszbat_colony
				log = "Hegemony of Khar'shan Colony (Erszbat) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = tikkud_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_tikkud_colony_buildings = yes
				generate_bat_tikkud_pops = yes
				save_global_event_target_as = sys_tikkud_colony
				log = "Hegemony of Khar'shan Colony (Tikk'ud) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = nefari_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_nefari_colony_buildings = yes
				generate_bat_nefari_pops = yes
				save_global_event_target_as = sys_nefari_colony
				log = "Hegemony of Khar'shan Colony (Nefari) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = mught_planet
				}
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_mught_colony_buildings = yes
				generate_bat_mught_pops = yes
				save_global_event_target_as = sys_mught_colony
				log = "Hegemony of Khar'shan Colony (Mught) Spawned"
			}			
			if = {
				limit = {
					has_planet_flag = khuramna_station
				}
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_khuramna_station_buildings = yes
				generate_bat_khuramna_station_pops = yes
				save_global_event_target_as = sys_khuramna_station
				log = "Hegemony of Khar'shan Colony (Khuramna Station) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = dukraar_planet
				}
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_dukraar_colony_buildings = yes
				generate_bat_dukraar_pops = yes
				save_global_event_target_as = sys_dukraar_colony
				log = "Hegemony of Khar'shan Colony (Dukraar) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = lorek_planet
				}
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_lorek_colony_buildings = yes
				generate_bat_lorek_pops = yes
				save_global_event_target_as = sys_lorek_colony
				log = "Hegemony of Khar'shan Colony (Lorek) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = juxhi_planet
				}
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_juxhi_colony_buildings = yes
				generate_bat_juxhi_pops = yes
				save_global_event_target_as = sys_juxhi_colony
				log = "Hegemony of Khar'shan Colony (Juxhi) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = adek_planet
				}
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_adek_colony_buildings = yes
				generate_bat_adek_pops = yes
				save_global_event_target_as = sys_adek_colony
				log = "Hegemony of Khar'shan Colony (Adek) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = camala_planet
				}
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_camala_colony_buildings = yes
				generate_bat_camala_pops = yes
				save_global_event_target_as = sys_camala_colony
				log = "Hegemony of Khar'shan Colony (Camala) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = viwei_planet
				}
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_viwei_colony_buildings = yes
				generate_bat_viwei_pops = yes
				save_global_event_target_as = sys_viwei_colony
				log = "Hegemony of Khar'shan Colony (Viwei) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = aratoht_planet
				}
				set_owner = event_target:hegemony_of_kharshan
				create_colony = {
					owner = event_target:hegemony_of_kharshan
					species = event_target:batarianSpecies
				}
				generate_bat_aratoht_colony_buildings = yes
				generate_bat_aratoht_pops = yes
				save_global_event_target_as = sys_aratoht_colony
				log = "Hegemony of Khar'shan Colony (Aratoht Colony) Spawned"
			}												
		}
	}	
}

generate_sedriicae_collective_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = sedriicae_collective_system
		}
		set_global_flag = sedriicae_collective_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = perix_planet
				}
				set_owner = event_target:sedriicae_collective
				create_colony = {
					owner = event_target:sedriicae_collective
					species = event_target:forayanSpecies
				}
				generate_sed_perix_colony_buildings = yes
				generate_sed_perix_pops = yes
				save_global_event_target_as = sys_perix_colony
				log = "Sedriicae Collective Colony (Perix) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = xixikii_planet
				}
				set_owner = event_target:sedriicae_collective
				create_colony = {
					owner = event_target:sedriicae_collective
					species = event_target:forayanSpecies
				}
				generate_sed_xixikii_colony_buildings = yes
				generate_sed_xixikii_pops = yes
				save_global_event_target_as = sys_xixikii_colony
				log = "Sedriicae Collective Colony (Xixik'ii) Spawned"
			}											
		}
	}	
}

generate_geth_consensus_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = geth_consensus_system
		}
		set_global_flag = geth_consensus_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = adas_planet
				}
				set_owner = event_target:geth_consensus
				create_colony = {
					owner = event_target:geth_consensus
					species = event_target:gethSpecies
				}
				generate_get_adas_colony_buildings = yes
				generate_get_adas_pops = yes
				save_global_event_target_as = sys_adas_colony
				log = "Geth Consensus Colony (Adas) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = charoum_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:geth_consensus
				create_colony = {
					owner = event_target:geth_consensus
					species = event_target:gethSpecies
				}
				generate_get_charoum_colony_buildings = yes
				generate_get_charoum_pops = yes
				save_global_event_target_as = sys_charoum_colony
				log = "Geth Consensus Colony (Charoum) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = naanacurrel_planet
				}
				set_owner = event_target:geth_consensus
				create_colony = {
					owner = event_target:geth_consensus
					species = event_target:gethSpecies
				}
				generate_get_naanacurrel_colony_buildings = yes
				generate_get_naanacurrel_pops = yes
				save_global_event_target_as = sys_naanacurrel_colony
				log = "Geth Consensus Colony (Naana'currel) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = kasdavar_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:geth_consensus
				create_colony = {
					owner = event_target:geth_consensus
					species = event_target:gethSpecies
				}
				generate_get_kasdavar_colony_buildings = yes
				generate_get_kasdavar_pops = yes
				save_global_event_target_as = sys_kasdavar_colony
				log = "Geth Consensus Colony (Kasda'Var) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = ammuta_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:geth_consensus
				create_colony = {
					owner = event_target:geth_consensus
					species = event_target:gethSpecies
				}
				generate_get_ammut_colony_buildings = yes
				generate_get_ammut_pops = yes
				save_global_event_target_as = sys_ammut_colony
				log = "Geth Consensus Colony (Ammut a) Spawned"
			}			
			if = {
				limit = {
					has_planet_flag = ammutb_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:geth_consensus
				create_colony = {
					owner = event_target:geth_consensus
					species = event_target:gethSpecies
				}
				generate_get_ammut_colony_buildings = yes
				generate_get_ammut_pops = yes
				save_global_event_target_as = sys_ammut_colony
				log = "Geth Consensus Colony (Ammut b) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = ammutc_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:geth_consensus
				create_colony = {
					owner = event_target:geth_consensus
					species = event_target:gethSpecies
				}
				generate_get_ammut_colony_buildings = yes
				generate_get_ammut_pops = yes
				save_global_event_target_as = sys_ammut_colony
				log = "Geth Consensus Colony (Ammut c) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = ammutd_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:geth_consensus
				create_colony = {
					owner = event_target:geth_consensus
					species = event_target:gethSpecies
				}
				generate_get_ammut_colony_buildings = yes
				generate_get_ammut_pops = yes
				save_global_event_target_as = sys_ammut_colony
				log = "Geth Consensus Colony (Ammut d) Spawned"
			}	
			if = {
				limit = {
					has_planet_flag = haestrom_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:geth_consensus
				create_colony = {
					owner = event_target:geth_consensus
					species = event_target:gethSpecies
				}
				generate_get_haestrom_colony_buildings = yes
				generate_get_haestrom_pops = yes
				save_global_event_target_as = sys_haestrom_colony
				log = "Geth Consensus Colony (Haestrom) Spawned"
			}										
		}
	}	
}

generate_disciples_of_nazara_colonies = {
	every_system = {
		limit = {
			is_btr_canon_map = yes	
			has_star_flag = disciples_of_nazara_system
		}
		set_global_flag = disciples_of_nazara_colonies_created
		every_system_planet = {
			if = {
				limit = {
					has_planet_flag = rastrom_planet
				}
				set_planet_flag = planetary_station
				set_deposit_flags = yes
				clear_deposits = yes
				deploy_planetary_station = yes
				set_station_deposits = yes
				set_owner = event_target:disciples_of_nazara
				create_colony = {
					owner = event_target:disciples_of_nazara
					species = event_target:gethSpecies
				}
				generate_naz_rastrom_colony_buildings = yes
				generate_naz_colony_pops = yes
				save_global_event_target_as = sys_rastrom_colony
				log = "Disciples of Nazara Colony (Rastrom) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = saetoshar_planet
				}
				set_owner = event_target:disciples_of_nazara
				create_colony = {
					owner = event_target:disciples_of_nazara
					species = event_target:gethSpecies
				}
				generate_naz_saetoshar_colony_buildings = yes
				generate_naz_colony_pops = yes
				save_global_event_target_as = sys_saetoshar_colony
				log = "Disciples of Nazara Colony (Saeto'Shar) Spawned"
			}
			if = {
				limit = {
					has_planet_flag = gaezaljenal_planet
				}
				set_owner = event_target:disciples_of_nazara
				create_colony = {
					owner = event_target:disciples_of_nazara
					species = event_target:gethSpecies
				}
				generate_naz_gaezaljenal_colony_buildings = yes
				generate_naz_colony_pops = yes
				save_global_event_target_as = sys_gaezaljenal_colony
				log = "Disciples of Nazara Colony (Gaezal'Jenal) Spawned"
			}								
		}
	}	
}

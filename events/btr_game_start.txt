### - NOTE FROM PUCK - HEAVILY MODIFIED VERSION OF VANILLA game_start.txt
namespace = btr_game_start

### Hidden Game Start Event
event = {
	id = btr_game_start.1
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_global_flag = game_started

		#TODO: REVIEW country.900
		every_country = {
			limit = { is_ai = no }
			country_event = { id = country.900 days = 460 random = 60 }
		}


		### SPAWN INVISIBLE GLOBAL EVENT COUNTRY
		create_country = {
			name = "global_event_country"
			type = global_event
			effect = {
				save_global_event_target_as = global_event_country
			}
		}

		### MARAUDER FLAGS
		every_country = {
			limit = { is_country_type = dormant_marauders }
			randomize_flag_symbol = "pirate"
		}

		### MARAUDERS SHOULD NOT ATTACK ENCLAVES OR INDEPENDENT WORLDS
			
		every_country = {
			limit = { 
				OR = {
					is_country_type = enclave 
					is_country_type = independent_colony
				}
			}
			every_country = {
				limit = { is_country_type = dormant_marauders }
				set_faction_hostility = {
					target = prev
					set_hostile = no
					set_neutral = no
					set_friendly = yes
				}
			}
		}

		### SLOW DOWN PRE-FTL EVENTS
		set_timed_global_flag = {
			flag = asteroid_sighted_pre_ftl_global
			years = 10
		}
		set_timed_global_flag = {
			flag = nuclear_war_pre_ftl_global
			years = 10
		}

		### ORIGINS

		#TODO: ORIGIN EVENTS
	}
}

event = {
	id = game_start.2
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_country = {
			limit = { exists = capital_scope }
			capital_scope = {
				solar_system = {
					every_system_planet = {
						if = {
							limit = { has_modifier = hazardous_weather }
							remove_modifier = hazardous_weather
						}
						if = {
							limit = { has_modifier = dangerous_wildlife }
							remove_modifier = dangerous_wildlife
						}
						if = {
							limit = { has_modifier = weak_magnetic_field }
							remove_modifier = weak_magnetic_field
						}
						if = {
							limit = { has_modifier = strong_magnetic_field }
							remove_modifier = strong_magnetic_field
						}
						if = {
							limit = { has_modifier = unstable_tectonics }
							remove_modifier = unstable_tectonics
						}
						if = {
							limit = { has_modifier = tidal_locked }
							remove_modifier = tidal_locked
						}
						if = {
							limit = { has_modifier = chthonian_planet }
							remove_modifier = chthonian_planet
						}
						if = {
							limit = { has_modifier = asteroid_impacts }
							remove_modifier = asteroid_impacts
						}
						if = {
							limit = { has_modifier = extensive_moon_system }
							remove_modifier = extensive_moon_system
						}
						if = {
							limit = { has_modifier = carbon_world }
							remove_modifier = carbon_world
						}
						if = {
							limit = { has_modifier = wild_storms }
							remove_modifier = wild_storms
						}
						if = {
							limit = { has_modifier = low_gravity }
							remove_modifier = low_gravity
						}
						if = {
							limit = { has_modifier = high_gravity }
							remove_modifier = high_gravity
						}
						#if = {
						#	limit = { has_modifier = hollow_planet }
						#	remove_modifier = hollow_planet
						#}
						if = {
							limit = { has_modifier = mineral_rich }
							remove_modifier = mineral_rich
						}
						if = {
							limit = { has_modifier = ultra_rich }
							remove_modifier = ultra_rich
						}
						if = {
							limit = { has_modifier = mineral_poor }
							remove_modifier = mineral_poor
						}
						if = {
							limit = { has_modifier = titanic_life }
							remove_modifier = titanic_life
						}
						if = {
							limit = { has_modifier = mineral_poor }
							remove_modifier = mineral_poor
						}
						if = {
							limit = { has_modifier = asteroid_belt }
							remove_modifier = asteroid_belt
						}
						if = {
							limit = { has_modifier = natural_beauty }
							remove_modifier = natural_beauty
						}
						if = {
							limit = { has_modifier = atmospheric_aphrodisiac }
							remove_modifier = atmospheric_aphrodisiac
						}
						if = {
							limit = { has_modifier = atmospheric_hallucinogen }
							remove_modifier = atmospheric_hallucinogen
						}
						if = {
							limit = { has_modifier = lush_planet }
							remove_modifier = lush_planet
						}
						if = {
							limit = { has_modifier = bleak_planet }
							remove_modifier = bleak_planet
						}
						if = {
							limit = { has_modifier = irradiated_planet }
							remove_modifier = irradiated_planet
						}
						if = {
							limit = { has_modifier = terraforming_candidate }
							remove_modifier = terraforming_candidate
						}
					}
				}
			}
		}
	}
}

### Hidden Game Start Event that resets tutorial for advisor trigger purposes
event = {
	id = game_start.3
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_country = {
			limit = { is_ai = no }
			country_event = { id = tutorial.104 }
		}
	}
}

### Empire init - add resources, empire modifiers, and technologies
country_event = {
	id = game_start.8
	hide_window = yes
	is_triggered_only = yes

	immediate = {

		if = {
			limit = {
				has_origin = asari_rep_origin
			}
			generate_asari_republic_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = salarian_uni_origin
			}
			generate_salarian_union_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = turian_hier_origin
			}
			generate_turian_hierarchy_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = systems_all_origin
			}
			generate_systems_alliance_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = courts_dek_origin
			}
			generate_courts_of_dekuuna_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = vol_protectorate_origin
			}
			generate_vol_protectorate_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = illuminated_primacy_origin
			}
			generate_illuminated_primacy_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = hegemony_of_kharshan_origin
			}
			generate_hegemony_of_kharshan_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = aralakh_kahmat_origin
			}
			generate_aralakh_kahmat_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = migrant_fle_origin
			}
			generate_migrant_fleet_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = cerberus_empire_origin
			}
			generate_cerberus_empire_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = omega_empire_origin
			}
			generate_omega_empire_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = illium_origin
			}
			generate_illium_corporate_interests_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = caleston_dir_origin
			}
			generate_caleston_directorate_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = remnants_of_rakhana_origin
			}
			generate_remnants_of_rakhana_starting_setup = yes
		}
		if = {
			limit = {
				has_origin = vorcha_origin
			}
			generate_vorcha_clandom_starting_setup = yes
		}	
		if = {
			limit = {
				has_origin = sedriicae_collective_origin
			}
			generate_sedriicae_collective_starting_setup = yes
		}	
		if = {
			limit = {
				has_origin = lystheni_order_origin
			}
			generate_lystheni_order_starting_setup = yes
		}				
		if = {
			limit = {
				has_origin = parnack_regime_origin
			}
			generate_parnack_regime_starting_setup = yes
		}		
		if = {
			limit = {
				has_origin = raloi_rep_origin
			}
			generate_raloi_republic_starting_setup = yes
		}			
		if = {
			limit = {
				has_origin = geth_con_origin
			}
			generate_geth_consensus_starting_setup = yes
		}			
		if = {
			limit = {
				has_origin = disciples_of_nazara_origin
			}
			generate_disciples_of_nazara_starting_setup = yes
		}					
		if = {
			limit = {
				has_origin = rachni_hive_origin
			}
			generate_rachni_hive_starting_setup = yes
		}	
		if = {
			limit = {
				has_origin = collectors_empire_origin
			}
			generate_collectors_empire_starting_setup = yes
		}	
	}
}

### Empire init - add ships
country_event = {
	id = game_start.9
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		#science
		if = {
			limit = { 
				OR = {
					is_btr_major_empire = no					
					is_btr_standard_empire = no
					is_low_tech_start = no
				}
			}
			create_fleet = {
				effect = {
					set_owner = prev

					create_ship = {
						name = random
						random_existing_design = science
					}

					set_fleet_stance = evasive
					#set_location = prev.capital_star
					set_location = prev.capital_scope.star

					owner = {
						create_leader = {
							class = scientist
							sub_type = survey
							name = random
							species = owner_main_species
						}
					}
					set_leader = last_created_leader
				}
			}
		}
		if = {
			limit = { 
				is_btr_standard_empire = yes
			}

			while = {
				count = 2
				create_fleet = {
					effect = {
						set_owner = prev
	
						create_ship = {
							name = random
							random_existing_design = science
						}
	
						set_fleet_stance = evasive
						#set_location = prev.capital_star
						set_location = prev.capital_scope.star
	
						owner = {
							create_leader = {
								class = scientist
								sub_type = survey
								name = random
								species = owner_main_species
							}
						}
						set_leader = last_created_leader
					}
				}
			}
		}
		if = {
			limit = { 
				OR = {
					is_btr_major_empire = yes
				}
			}

			while = {
				count = 3
				create_fleet = {
					effect = {
						set_owner = prev
	
						create_ship = {
							name = random
							random_existing_design = science
						}
	
						set_fleet_stance = evasive
						#set_location = prev.capital_star
						set_location = prev.capital_scope.star
	
						owner = {
							create_leader = {
								class = scientist
								sub_type = survey
								name = random
								species = owner_main_species
							}
						}
						set_leader = last_created_leader
					}
				}
			}
		}


		#Asari Republics
		if = {
			limit = { 
				root = {
					has_country_flag = asari_republics
				}
			}
			generate_asari_rep_construction_ships = yes
			generate_asari_rep_second_fleet = yes
			generate_asari_rep_third_fleet = yes
			generate_asari_rep_fourth_fleet = yes
			generate_asari_rep_sixth_fleet = yes
		}
		#Salarian Union
		if = {
			limit = { 
				root = {
					has_country_flag = salarian_union
				}
			}
			generate_salarian_uni_first_fleet = yes
			generate_salarian_uni_second_fleet = yes
			generate_salarian_uni_third_fleet = yes
			generate_salarian_uni_construction_ships = yes
		}
		#Turian Hierarchy
		if = {
			limit = { 
				root = {
					has_country_flag = turian_hierarchy
				}
			}
			generate_turian_hier_fourth_fleet = yes
			generate_turian_hier_fifth_fleet = yes
			generate_turian_hier_sixth_fleet = yes
			generate_turian_hier_construction_ships = yes
		}
		#Systems Alliance
		if = {
			limit = { 
				root = {
					has_country_flag = systems_alliance
				}
			}
			generate_systems_all_third_fleet = yes
			generate_systems_all_fourth_fleet = yes
			generate_systems_all_construction_ships = yes
		}
		#Courts of Dekuuna
		if = {
			limit = { 
				root = {
					has_country_flag = courts_of_dekuuna
				}
			}
			generate_courts_dek_first_fleet = yes
			generate_courts_dek_construction_ships = yes
		}
		#Illuminated Primacy
		if = {
			limit = { 
				root = {
					has_country_flag = illuminated_primacy
				}
			}
			generate_illuminated_pri_first_fleet = yes
			generate_illuminated_pri_construction_ships = yes
		}
		#Vol Protectorate
		if = {
			limit = { 
				root = {
					has_country_flag = vol_protectorate
				}
			}
			generate_vol_pro_first_fleet = yes
			generate_vol_pro_construction_ships = yes
		}
		#Hegemony of Khar'shan
		if = {
			limit = { 
				root = {
					has_country_flag = hegemony_of_kharshan
				}
			}
			generate_hegemony_khar_second_fleet = yes
			generate_hegemony_khar_third_fleet = yes
			generate_hegemony_khar_construction_ships = yes
		}
		#Aralakh Kahmat
		if = {
			limit = { 
				root = {
					has_country_flag = aralakh_kahmat
				}
			}
			generate_aralakh_kah_third_fleet = yes
			generate_aralakh_kah_construction_ships = yes
		}
		#Omega
		if = {
			limit = { 
				root = {
					has_country_flag = omega_empire
				}
			}
			generate_omega_first_fleet = yes
			generate_omega_second_fleet = yes
			generate_omega_construction_ships = yes
		}
		#Illium Corporate Interests
		if = {
			limit = { 
				root = {
					has_country_flag = illium_corporate_interests
				}
			}
			generate_illium_corpsec_fleet = yes
			generate_illium_construction_ships = yes
		}
		#Caleston Directorate
		if = {
			limit = { 
				root = {
					has_country_flag = caleston_directorate
				}
			}
			generate_caleston_corpsec_fleet = yes
			generate_caleston_construction_ships = yes
		}
		#Sed'riicae Collective		
		if = {
			limit = { 
				root = {
					has_country_flag = sedriicae_collective
				}
			}
			generate_sedriicae_col_first_fleet = yes
			generate_sedriicae_col_construction_ships = yes
		}
		#Lystheni Order
		if = {
			limit = { 
				root = {
					has_country_flag = lystheni_order
				}
			}
			generate_sedriicae_col_first_fleet = yes
			generate_sedriicae_col_construction_ships = yes
		}
		#Gothones Remnant
		if = {
			limit = { 
				root = {
					has_country_flag = gothones_remnant
				}
			}
			generate_gothones_rem_first_fleet = yes
			generate_gothones_rem_construction_ships = yes
		}
		#Geth Consensus
		if = {
			limit = { 
				root = {
					has_country_flag = geth_consensus
				}
			}
			generate_geth_con_first_fleet = yes
			generate_geth_con_construction_ships = yes
		}
		#Disciples of Nazara
		if = {
			limit = { 
				root = {
					has_country_flag = disciples_of_nazara
				}
			}
			generate_disciples_naz_first_fleet = yes
			generate_disciples_naz_construction_ships = yes
		}
		#Citadel Defense
		if = {
			limit = { 
				root = {
					has_country_flag = citadel_council
				}
			}
			generate_citadel_con_first_fleet = yes
			generate_citadel_con_second_fleet = yes
			generate_citadel_con_third_fleet = yes
			generate_citadel_con_construction_ships = yes
		}
		
		else_if = {
			limit = {
				NOT = {
					has_origin = origin_broken_shackles
					# Assigned in origin.110 instead
				}
			}
			create_leader = {
				class = admiral
				name = random
				species = owner_main_species
			}
		}
	}
}

# this: capital planet
# from: founder species
planet_event = {
	id = game_start.12
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		generate_start_deposits_and_blockers = yes
		generate_start_buildings_and_districts = yes
		generate_start_pops = yes
		generate_home_planet_final_pass = yes
	}
}

# on_initialize_advanced_colony: remove tile blockers on capital
planet_event = {
	id = game_start.20
	hide_window = yes
	is_triggered_only = yes

	pre_triggers = {
		is_capital = yes
	}

	trigger = {
		owner = { NOT = { has_origin = origin_shattered_ring } }
	}

	immediate = {
		clear_blockers = yes
	}
}

# on_initialize_advanced_colony: upgrade colony shelter
planet_event = {
	id = game_start.21
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { has_building = building_colony_shelter }
			remove_building = building_colony_shelter
			add_building = building_capital
			break = yes
		}
		if = {
			limit = { has_building = building_deployment_post }
			remove_building = building_deployment_post
			add_building = building_machine_capital
		}
	}
}

@advanced_empire_capital_num_power_plants = 4
@advanced_empire_colony_num_power_plants = 2
@advanced_empire_num_mines = 1
@advanced_empire_num_farms = 1

# on_initialize_advanced_colony: set up additional buildings (mines, farms, power plants)
planet_event = {
	id = game_start.22
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				is_capital = yes
				NOT = { owner = { has_origin = origin_shattered_ring } }
			}
			add_district_and_planet_size_if_needed_effect = { district = district_mining }
			add_district_and_planet_size_if_needed_effect = { district = district_generator }
			add_district_and_planet_size_if_needed_effect = { district = district_generator }

			if = {
				limit = { owner = { has_authority = auth_machine_intelligence } }
				add_district_and_planet_size_if_needed_effect = { district = district_nexus }
				add_district_and_planet_size_if_needed_effect = { district = district_nexus }
			}
			else_if = {
				limit = { owner = { has_authority = auth_hive_mind } }
				add_district_and_planet_size_if_needed_effect = { district = district_hive }
				add_district_and_planet_size_if_needed_effect = { district = district_hive }
			}
			else = {
				add_district_and_planet_size_if_needed_effect = { district = district_city }
				add_district_and_planet_size_if_needed_effect = { district = district_city }
			}

			if = {
				limit = {
					owner = {
						NOT = { has_authority = auth_machine_intelligence }
						is_anglers_empire = yes
					}
					is_planet_class = pc_ocean
				}
				add_district_and_planet_size_if_needed_effect = { district = district_farming_uncapped }
				add_district_and_planet_size_if_needed_effect = { district = district_farming_uncapped }
			}
			else_if = {
				limit = {
					owner = { NOT = { has_authority = auth_machine_intelligence } }
				}
				add_district_and_planet_size_if_needed_effect = { district = district_farming }
				add_district_and_planet_size_if_needed_effect = { district = district_farming }
			}
			if = {
				limit = {
					owner = { has_authority = auth_machine_intelligence }
				}
				add_district_and_planet_size_if_needed_effect = { district = district_generator }
				add_district_and_planet_size_if_needed_effect = { district = district_generator }
			}

			if = {
				limit = { owner = { is_gestalt = no } }
				add_building = building_factory_1
				add_building = building_commercial_zone
			}
			if = {
				limit = {
					owner = { is_subterranean_empire = yes }
				}
				add_district_and_planet_size_if_needed_effect = { district = district_mining_uncapped }
				add_district_and_planet_size_if_needed_effect = { district = district_mining_uncapped }
			}
		}
		else_if = {
			limit = {
				is_capital = yes
				owner = { has_origin = origin_shattered_ring }
			}

			random_deposit = {
				limit = { is_deposit_type = d_decrepit_tunnels_2 }
				clear_blocker = yes
			}
			random_deposit = {
				limit = { is_deposit_type = d_decrepit_tunnels_3 }
				clear_blocker = yes
			}
			random_deposit = {
				limit = { is_deposit_type = d_segment_rubble_4 }
				clear_blocker = yes
			}
			while = {
				count = 2
				add_district_if_possible_effect = {
					district = district_industrial
				}
			}
			while = {
				count = 2
				add_district_if_possible_effect = {
					district = district_mining_uncapped
				}
			}
			if = {
				limit = {
					owner = { is_gestalt = no }
				}
				while = {
					count = 2
					add_district_if_possible_effect = {
						district = district_city
					}
				}
				if = {
					limit = {
						owner = { 
							is_lithoid_empire = yes
						}
					}
					add_district_if_possible_effect = {
						district = district_srw_commercial
					}
				}
				else = {
					add_district_if_possible_effect = {
						district = district_farming_uncapped
					}
				}
			}
			else_if = {
				limit = {
					owner = { is_hive_empire = yes }
				}
				while = {
					count = 2
					add_district_if_possible_effect = {
						district = district_hive
					}
				}
				if = {
					limit = {
						owner = { is_lithoid_empire = yes }
					}
					add_district_if_possible_effect = {
						district = district_hive
					}
				}
				else = {
					add_district_if_possible_effect = {
						district = district_farming_uncapped
					}
				}
			}
			else = {
				while = {
					count = 3
					add_district_if_possible_effect = {
						district = district_nexus
					}
				}
			}

			add_building = building_foundry_1
			add_building = building_factory_1
			if = {
				limit = {
					owner = {
						is_megacorp = no
						is_spiritualist = no
						is_gestalt = no
					}
				}
				add_building = building_bureaucratic_1
			}
			else_if = {
				limit = {
					owner = { is_spiritualist = yes }
				}
				add_building = building_temple
			}
			else_if = {
				limit = {
					owner = { is_megacorp = yes }
				}
				add_building = building_corporate_monument
			}
			else_if = {
				limit = {
					owner = { is_hive_empire = yes }
				}
				add_building = building_hive_node
			}
			else_if = {
				limit = {
					owner = {
						is_machine_empire = yes
						NOT = { has_valid_civic = civic_machine_servitor }
					}
				}
				add_building = building_simulation_1
			}
			if = {
				limit = {
					owner = { is_gestalt = no }
				}
				add_building = building_holo_theatres
			}
		}
		else = {
			add_district_and_planet_size_if_needed_effect = { district = district_generator }
			add_district_and_planet_size_if_needed_effect = { district = district_mining }

			if = {
				limit = { owner = { has_authority = auth_machine_intelligence } }
				add_district_and_planet_size_if_needed_effect = { district = district_nexus }
				add_district_and_planet_size_if_needed_effect = { district = district_generator }
				add_district_and_planet_size_if_needed_effect = { district = district_generator }
			}
			else_if = {
				limit = { owner = { has_authority = auth_hive_mind } }
				add_district_and_planet_size_if_needed_effect = { district = district_hive }
				add_district_and_planet_size_if_needed_effect = { district = district_farming }
			}
			else = {
				add_district_and_planet_size_if_needed_effect = { district = district_city }
				if = {
					limit = {
						owner = { is_anglers_empire = yes }
						is_planet_class = pc_ocean
					}
					add_district_and_planet_size_if_needed_effect = { district = district_farming_uncapped }
				}
				else = {
					add_district_and_planet_size_if_needed_effect = { district = district_farming }
				}
			}

			if = {
				limit = { owner = { has_origin = origin_mechanists } }
				add_building = building_robot_assembly_plant
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						NOT = { has_civic = civic_fanatic_purifiers } #purges them instead
						NOT = { has_ai_personality_behaviour = purger }
					}
				}
				add_building = building_necrophage_elevation_chamber
			}
		}
	}
}

# on_initialize_advanced_colony: add additional pops
planet_event = {
	id = game_start.23
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { is_capital = yes }

			if = {
				limit = { owner = { has_authority = auth_machine_intelligence } }
				while = {
					count = 13
					create_pop = { species = owner_main_species }
				}
			}
			else_if = {
				limit = { owner = { has_authority = auth_hive_mind } }
				while = {
					count = 16
					create_pop = { species = owner_main_species }
				}
			}
			else_if = {
				limit = { owner = { has_origin = origin_mechanists } }
				random_galaxy_species = {
					limit = {
						has_species_flag = mechanical_species@root.owner
					}
					save_event_target_as = mechanical_species
				}
				while = {
					count = 6
					create_pop = {
						species = event_target:mechanical_species
					}
				}
				while = {
					count = 12
					create_pop = { species = owner_main_species }
				}
			}
			else_if = {
				limit = {
					owner = {
						OR = {
							has_origin = origin_syncretic_evolution
							has_origin = origin_necrophage
						}
					}
				}
				random_galaxy_species = {
					limit = {
						has_species_flag = syncretic_species@root.owner
					}
					save_event_target_as = syncretic_species
				}
				while = {
					count = 8
					create_pop = { species = event_target:syncretic_species }
				}
				while = {
					count = 10
					create_pop = { species = owner_main_species }
				}
			}
			else = {
				while = {
					count = 18
					create_pop = { species = owner_main_species }
				}
			}
		}
		else = {
			if = {
				limit = { owner = { has_authority = auth_machine_intelligence } }
				while = {
					count = 15
					create_pop = { species = owner_main_species }
				}
			}
			else_if = {
				limit = { owner = { has_authority = auth_hive_mind } }
				while = {
					count = 18
					create_pop = { species = owner_main_species }
				}
			}
			else_if = {
				limit = { owner = { has_origin = origin_mechanists } }
				random_galaxy_species = {
					limit = {
						has_species_flag = mechanical_species@root.owner
					}
					save_event_target_as = mechanical_species
				}
				while = {
					count = 4
					create_pop = {
						species = event_target:mechanical_species
					}
				}
				while = {
					count = 7
					create_pop = { species = owner_main_species }
				}
			}
			else_if = {
				limit = {
					owner = {
						OR = {
							has_origin = origin_syncretic_evolution
							has_origin = origin_necrophage
						}
					}
				}
				random_galaxy_species = {
					limit = {
						has_species_flag = syncretic_species@root.owner
					}
					save_event_target_as = syncretic_species
				}
				while = {
					count = 4
					create_pop = { species = event_target:syncretic_species }
				}
				while = {
					count = 6
					create_pop = { species = owner_main_species }
				}
			}
			else = {
				while = {
					count = 10
					create_pop = { species = owner_main_species }
				}
			}
		}
	}
}

### Create wormhole pairs
event = {
	id = game_start.31
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		get_galaxy_setup_value = {
			setting = num_wormhole_pairs
			which = local_wormholes_num
			scale_by = 5
		}
		while = {
			count = local_wormholes_num
			random_system = {
				limit = {
					NOR = {
						has_natural_wormhole = yes
						starting_system = yes
						has_star_flag = empire_cluster
					}
				}
				random_system = {
					limit = {
						NOR = {
							has_natural_wormhole = yes
							starting_system = yes
							has_star_flag = empire_cluster
						}
						distance = {
							source = prev
							min_distance >= 500
						}
					}
					prev = { # done this way to ensure we don't spawn "orphan" wormholes (wormholes that aren't linked to anything)
						spawn_natural_wormhole = {
							bypass_type = wormhole
							random_pos = yes
							orbit_angle = 360
						}
					}
					spawn_natural_wormhole = {
						bypass_type = wormhole
						random_pos = yes
						orbit_angle = 360
					}
					link_wormholes = prev
				}
			}
		}
	}
}

### Empire init - populate home system
country_event = {
	id = game_start.33
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = default
	}

	immediate = {
		if = {
			limit = { #Make sure you are unlikely to be boxed in completely
				OR = {
					has_origin = origin_hegemon
					has_origin = origin_common_ground
				}
				capital_scope = {
					solar_system = {
						NOT = {
							any_neighbor_system = {
								NOT = { exists = owner }
							}
						}
					}
				}
			}
			if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 15
							max_distance <= 20
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 15
							max_distance <= 20
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 20
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 20
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 40
							max_distance <= 60
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 40
							max_distance <= 60
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			if = {
				limit = {
					exists = event_target:hyperlane_system
					event_target:hyperlane_system = {
						NOT = {
							any_neighbor_system = {
								NOT = { exists = owner }
							}
						}
					}
				}
				event_target:hyperlane_system = {
					random_system = {
						limit = {
							distance = {
								source = prev
								type = euclidean
								min_distance >= 1
								max_distance <= 25
							}
							NOT = { has_hyperlane_to = prev }
							NOT = { exists = owner }
						}
						add_hyperlane = {
							from = this
							to = prev
						}
					}
				}
			}
		}
		if = {
			limit = {
				has_origin = origin_default
				NOT = { has_technology = tech_planetary_unification }
			}
			add_research_option = tech_planetary_unification
		}
		if = {
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_mining_station
					has_planet_flag = starting_mining_target
					has_mining_station = no
					root = {
						is_low_tech_start = no
					}
				}
				create_mining_station = {
					owner = ROOT
				}
			}
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_research_station
					has_planet_flag = starting_research_target
					has_research_station = no
					root = {
						is_low_tech_start = no
					}
				}
				create_research_station = {
					owner = ROOT
				}
			}
		}

		if = {
			limit = {
				has_origin = origin_necrophage
				NOT = { has_civic = civic_fanatic_purifiers }
				NOT = { has_ai_personality_behaviour = purger }
			}
			country_event = { id = necroids.2 days = 3420 } #tell them about the necrophage mechanic
		}
		if = {
			limit = {
				has_origin = origin_necrophage
				is_ai = yes
			}
			country_event = { id = necroids.6 days = 1800 }
			country_event = { id = necroids.6 days = 3600 }
			country_event = { id = necroids.6 days = 5400 }
			country_event = { id = necroids.6 days = 7200 }
		}
		if = {
			limit = {
				has_origin = origin_necrophage
				OR = {
					has_country_flag = necrophage_commonwealth
					has_country_flag = necrophage_une
				}
			}
			random_country = {
				limit = {
					OR = {
						AND = {
							has_country_flag = human_1
							prev = { has_country_flag = necrophage_commonwealth }
						}
						AND = {
							has_country_flag = human_2
							prev = { has_country_flag = necrophage_une }
						}
					}
				}
				random_owned_pop = {
					limit = {
						NOT = { is_same_species = prev }
					}
					species = { save_event_target_as = correct_prepatent_species }
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { is_same_species = owner_species }
				}
				planet = {
					create_pop = {
						species = event_target:correct_prepatent_species
					}
				}
				kill_pop = yes
			}
			remove_country_flag = necrophage_une
			remove_country_flag = necrophage_commonwealth
		}
		if = {
			limit = {
				has_origin = origin_slavers
			}
			capital_scope = { generate_slaver_bonus = yes }
		}
		if = {
			limit = {
				has_valid_civic = civic_hive_stargazers
			}
			every_system = {
				limit = {
					distance = {
						source = root.capital_scope
						use_bypasses = no
						max_jumps = 3
					}
				}
				root = { set_visited = prev }
			}
		}
	}
}

### Nebula System Art
event = {
	id = game_start.50
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		every_system = {
			limit = { is_inside_nebula = yes }
			nebula_cloaking_effect = yes
			# Class B
			if = {
				limit = {
					OR = {
						is_star_class = sc_b
						is_star_class = sc_binary_2
						is_star_class = sc_binary_5
						is_star_class = sc_trinary_2
						is_star_class = sc_trinary_4
					}
				}
				random_list = {
					20 = { create_nebula_3 = yes }
					20 = { create_nebula_4 = yes }
					10 = { create_rare_nebula_1 = yes }
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_1 = yes
					}
				}
			}
			# Class A
			else_if = {
				limit = {
					OR = {
						is_star_class = sc_a
						is_star_class = sc_binary_1
						is_star_class = sc_binary_9
						is_star_class = sc_binary_10
					}
				}
				if = {
					limit = { has_star_flag = ocean_paradise_nebula }
					create_rare_nebula_1 = yes
				}
				else = {
					random_list = {
						20 = { create_nebula_3 = yes }
						20 = { create_nebula_4 = yes }
						10 = { create_rare_nebula_1 = yes }
						10 = { create_rare_nebula_2 = yes }
						4 = {
							modifier = {
								factor = 0
								has_star_flag = empire_home_system
							}
							create_turbulent_nebula_1 = yes
						}
						4 = {
							modifier = {
								factor = 0
								has_star_flag = empire_home_system
							}
							create_turbulent_nebula_2 = yes
						}
					}
				}
			}
			# Class F
			else_if = {
				limit = { is_star_class = sc_f }
				random_list = {
					20 = { create_nebula_3 = yes }
					20 = { create_nebula_4 = yes }
					10 = { create_rare_nebula_1 = yes }
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_1 = yes
					}
				}
			}
			# Class G
			else_if = {
				limit = {
					OR = {
						is_star_class = sc_g
						is_star_class = sc_binary_8
						is_star_class = sc_trinary_1
					}
				}
				random_list = {
					20 = { create_nebula_1 = yes }
					10 = { create_rare_nebula_2 = yes }
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_2 = yes
					}
				}
			}
			# Class K
			else_if = {
				limit = {
					OR = {
						is_star_class = sc_k
						is_star_class = sc_binary_7
						is_star_class = sc_trinary_3
					}
				}
				random_list = {
					20 = { create_nebula_1 = yes }
					20 = { create_nebula_2 = yes }
					10 = { create_rare_nebula_2 = yes }
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_2 = yes
					}
				}
			}
			# Class M
			else_if = {
				limit = {
					OR = {
						is_star_class = sc_m
						is_star_class = sc_m_giant
						is_star_class = sc_binary_3
						is_star_class = sc_binary_4
						is_star_class = sc_binary_6
					}
				}
				random_list = {
					20 = { create_nebula_1 = yes }
					20 = { create_nebula_2 = yes }
					10 = { create_rare_nebula_2 = yes }
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_2 = yes
					}
				}
			}
			# Class T
			else_if = {
				limit = { is_star_class = sc_t }
				random_list = {
					20 = { create_nebula_3 = yes }
					10 = { create_rare_nebula_1 = yes }
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_1 = yes
					}
				}
			}
			# Black Hole
			else_if = {
				limit = { is_star_class = sc_black_hole }
				random_list = {
					20 = { create_nebula_1 = yes }
					20 = { create_nebula_2 = yes }
					20 = { create_nebula_3 = yes }
					20 = { create_nebula_4 = yes }
					10 = { create_rare_nebula_1 = yes }
					10 = { create_rare_nebula_2 = yes }
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_1 = yes
					}
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_2 = yes
					}
				}
			}
			# Neutron Star
			else_if = {
				limit = { is_star_class = sc_neutron_star }
				random_list = {
					20 = { create_nebula_3 = yes }
					20 = { create_nebula_4 = yes }
					10 = { create_rare_nebula_1 = yes }
					10 = { create_rare_nebula_2 = yes }
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_1 = yes
					}
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_2 = yes
					}
				}
			}
			# Pulsar
			else_if = {
				limit = { is_star_class = sc_pulsar }
				random_list = {
					20 = { create_nebula_3 = yes }
					20 = { create_nebula_4 = yes }
					10 = { create_rare_nebula_1 = yes }
					10 = { create_rare_nebula_2 = yes }
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_1 = yes
					}
					4 = {
						modifier = {
							factor = 0
							has_star_flag = empire_home_system
						}
						create_turbulent_nebula_2 = yes
					}
				}
			}
		}
	}
}

country_event = {
	id = game_start.60
	hide_window = yes
	trigger = {
		is_country_type = default
		#selectable = { host_has_dlc = "Galactic Paragons" }
	}

	is_triggered_only = yes

	immediate = {
		set_variable = {
			which = paragon_chance_negative
			value = 0
		}

		# Give Empire the starting Council Agenda, and progress it to about 1-2 years from finishing.
		if = {
			limit = { is_gestalt = yes }
			set_council_agenda = agenda_infinite_opportunities_gestalt
		}
		else = {
			set_council_agenda = agenda_infinite_opportunities

			# Prefer a Scientist as Head of Research (otherwise picks your Home planet Governor).
			random_owned_leader = {
				limit = {
					leader_class = scientist
					is_ruler = no
				}
				set_council_position = councilor_research
			}
		}
		add_council_agenda_progress = 6000
	}
}

# Create Gestalt Council.
country_event = {
	id = game_start.61
	hide_window = yes
	trigger = {
		OR = {
			is_country_type = default
			is_country_type = fallen_empire
		}
		is_gestalt = yes
	}

	is_triggered_only = yes

	immediate = {
		country_create_gestalt_councilor = {
			CLASS = governor
			COUNCIL_POS = councilor_gestalt_governor
			DESC = councilor_gestalt_governor_desc
		}
		country_create_gestalt_councilor = {
			CLASS = scientist
			COUNCIL_POS = councilor_gestalt_scientist
			DESC = councilor_gestalt_scientist_desc
		}
		country_create_gestalt_councilor = {
			CLASS = admiral
			COUNCIL_POS = councilor_gestalt_admiral
			DESC = councilor_gestalt_admiral_desc
		}
		country_create_gestalt_councilor = {
			CLASS = general
			COUNCIL_POS = councilor_gestalt_general
			DESC = councilor_gestalt_general_desc
		}
		if = {
			limit = {
				is_country_type = fallen_empire
			}
			every_owned_leader = {
				limit = {
					is_councilor = yes
					is_ruler = no
				}
				add_skill = 9
				set_gestalt_node_protrait_effect = yes
			}
		}
	}
}

#Place Memory Vault building if you have the civic at game start
country_event = {
	id = game_start.62
	hide_window = yes
	trigger = {
		is_country_type = default
		is_memory_vault_empire = yes
		NOR = {
			has_origin = origin_broken_shackles
			has_origin = origin_payback
			has_origin = origin_void_dwellers
		}
	}

	is_triggered_only = yes

	immediate = {
		capital_scope = {
			set_variable = {
				which = paragon_memory_vault
				value = 0
			}
			add_building = building_paragon_memory_vaults
		}
	}
}

# Change Ethic of first Ruler to empire's fanatic ethic.
# More likely they would've been elected, and easier to re-elect them.
country_event = {
	id = game_start.63
	hide_window = yes
	trigger = {
		is_country_type = default
		is_gestalt = no
	}

	is_triggered_only = yes

	immediate = {
		switch = {
			trigger = has_ethic
			ethic_fanatic_pacifist = {
				ruler = { change_background_ethic = ethic_pacifist }
			}
			ethic_fanatic_militarist = {
				ruler = { change_background_ethic = ethic_militarist }
			}
			ethic_fanatic_xenophile = {
				ruler = { change_background_ethic = ethic_xenophile }
			}
			ethic_fanatic_xenophobe = {
				ruler = { change_background_ethic = ethic_xenophobe }
			}
			ethic_fanatic_egalitarian = {
				ruler = { change_background_ethic = ethic_egalitarian }
			}
			ethic_fanatic_authoritarian = {
				ruler = { change_background_ethic = ethic_authoritarian }
			}
			ethic_fanatic_spiritualist = {
				ruler = { change_background_ethic = ethic_spiritualist }
			}
			ethic_fanatic_materialist = {
				ruler = { change_background_ethic = ethic_materialist }
			}
		}
	}
}

#Place Clinic building if you have the Pharma civic at game start
country_event = {
	id = game_start.64
	hide_window = yes
	trigger = {
		exists = owner
		has_civic = civic_private_healthcare_corporate
		is_country_type = default
		NOR = {
			has_origin = origin_broken_shackles
			has_origin = origin_payback
			has_origin = origin_void_dwellers
		}
	}

	is_triggered_only = yes

	immediate = {
		capital_scope = { add_building = building_clinic }
		give_technology = { message = no tech = tech_frontier_health }
		add_research_option = tech_subdermal_stimulation
	}
}

#Place additional cop building, if you have Dystopian Society
country_event = {
	id = game_start.65
	hide_window = yes
	trigger = {
		exists = owner
		has_civic = civic_dystopian_society
		is_country_type = default
		NOR = {
			has_origin = origin_broken_shackles
			has_origin = origin_payback
			has_origin = origin_void_dwellers
		}
	}

	is_triggered_only = yes

	immediate = {
		capital_scope = { add_building = building_precinct_house }
	}
}

#Xenolinguistic tech for some Origins
country_event = {
	id = game_start.66
	hide_window = yes
	trigger = {
		has_paragon_dlc = yes
		exists = owner
		is_country_type = default
		OR = {
			has_origin = origin_broken_shackles
			has_origin = origin_payback
			has_origin = origin_scion
			has_origin = origin_common_ground
			has_origin = origin_hegemon
			has_origin = origin_imperial_vassal
		}
	}

	is_triggered_only = yes

	immediate = {
		add_research_option = tech_xeno_linguistics
		add_tech_progress = {
			tech = tech_xeno_linguistics
			progress = 0.50
		}
	}
}

############################
#
# On Action Events
#
# Written by Annatar
#
############################


namespace = planetarystations_action

# Destroying a Planetary Station after Orbital Bombardment
planet_event = {
	id = planetarystations_action.1
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		planet_devastation >= 100
		has_planet_flag = planetary_station
	}

	immediate = {
		owner = { country_event = { id = planetarystations_action.2 days = 1 } }
		destroy_planetary_station = yes
	}
}

country_event = {
	id = planetarystations_action.2
	title = "planetarystations_action.2.name"
	desc = "planetarystations_action.2.desc"
	picture = GFX_evt_station_wreckage
	show_sound = event_structural_collapse
	location = ROOT
	
	is_triggered_only = yes

	option = {
		name = UNFORTUNATE
	}
}

### Arrests and Transferring prisoners
planet_event = {
	id = planetarystations_action.3
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		has_planet_flag = prison_station
		NOT = { has_modifier = planet_population_control }
		owner = {
			any_owned_planet = {
				OR = {
					any_owned_pop = { has_job = criminal }
					AND = {
						has_modifier = political_persecution
						any_owned_pop = { has_ethic = ethic_egalitarian }
					}
					AND = {
						has_modifier = hunting_heretics
						any_owned_pop = { has_ethic = ethic_materialist }
					}
				}
			}
		}
	}
	
	immediate = {
		save_event_target_as = prison_station
		owner = {
			random_owned_planet = { 
				limit = { 
					OR = {
						any_owned_pop = { has_job = criminal }
						AND = {
							has_modifier = political_persecution
							any_owned_pop = { has_ethic = ethic_egalitarian }
						}
						AND = {
							has_modifier = hunting_heretics
							any_owned_pop = { has_ethic = ethic_materialist }
						}
					}
				}
				if = {
					limit = { has_modifier = political_persecution }
					random_owned_pop = {
						limit = { has_ethic = ethic_egalitarian }
						set_timed_pop_flag = {
							flag = pop_convicted
							years = 20
						}
						resettle_pop = {
							pop = this
							planet = event_target:prison_station
						}
					}
				}
				else_if = {
					limit = { has_modifier = hunting_heretics }
					random_owned_pop = {
						limit = { has_ethic = ethic_materialist }
						set_timed_pop_flag = {
							flag = pop_convicted
							years = 20
						}
						resettle_pop = {
							pop = this
							planet = event_target:prison_station
						}
					}
				}
				else = {
					random_owned_pop = {
						limit = {
							has_job = criminal
						}
						set_timed_pop_flag = {
							flag = pop_convicted
							years = 20
						}
						resettle_pop = {
							pop = this
							planet = event_target:prison_station
						}
					}
				}
				
				create_message = {
					type = FELONY_TRANSPORT
					localization = FELONY_TRANSPORT_DESC
					days = 30
					target = THIS
					variable = {
						type = name
						localization = PLANET
						scope = this
					}
					variable = {
						type = name
						localization = PRISON
						scope = event_target:prison_station
					}
				}
			}
		}
	}
}

# Removing the prison station
planet_event = {
	id = planetarystations_action.5
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = { is_gestalt = yes }
		has_planet_flag = prison_station
	}

	immediate = {
		remove_planet_flag = prison_station
		validate_planet_buildings_and_districts = yes
	}
}

country_event = {
	id = planetarystations_action.6
	title = "planetarystations_action.6.name"
	desc = "planetarystations_action.6.desc"
	picture = GFX_evt_shattered_planet
	show_sound = event_construction
	location = event_target:cracked_planet
	
	is_triggered_only = yes

	option = {
		name = OK
	}
}

# Consumption event for necrophage
planet_event = {
	id = planetarystations_action.7
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_planet_flag = planetary_station
		has_district = district_elevation_center
		exists = owner
		owner = {
			has_origin = origin_necrophage
			has_trait = trait_necrophage
		}
		num_assigned_jobs = {
			job = necro_apprentice
			value >= 1
		}
	}

	immediate = {
		set_timed_planet_flag = {
			flag = necrophage_alert_timer
			days = 2880
		}
		set_saved_date = {
			key = necrophage_elevation_timer
			days_from_present = 3600
			expires = 3600
		}
		random_owned_pop = {
			limit = {
				is_same_species = owner_species
				has_trait = trait_necrophage
			}
			species = { save_event_target_as = necrophage_pop_species }
		}
		every_owned_pop = {
			limit = { has_job = necro_apprentice }
			root.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
			root = {
				change_variable = {
					which = var_necrophaged_pops
					value = 1
				}
				if = {
					limit = {
						exists = event_target:necrophage_pop_species
					}
					create_pop = {
						species = event_target:necrophage_pop_species
					}
				}
				else = {
					create_pop = {
						species = owner_species
					}
				}
				if = {
					limit = {
						last_created_pop = {
							NOT = { ideal_planet_class = root }
						}
						NOR = {
							uses_district_set = habitat
							uses_district_set = ring_world
							uses_district_set = city_world
							uses_district_set = hive_world
							uses_district_set = machine_world
							is_planet_class = pc_gaia
							is_planet_class = pc_relic
						}
						owner = {
							has_technology = tech_glandular_acclimation
							NOT = { ideal_planet_class = root }
						}
					}
					last_created_pop = {
						modify_species = {
							ideal_planet_class = root
						}
					}
				}
			}
			every_country = {
				limit = {
					has_communications = root.owner
					NOT = { is_country = root.owner }
					NOT = { is_same_species = prev }
					NOT = { has_ai_personality_behaviour = purger }
					NOT = { has_origin = origin_necrophage }
					NOT = { has_ethic = ethic_gestalt_consciousness }
					NOR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
					OR = {
						is_country_type = default
						has_ai_personality = awakened_fallen_empire_xenophile
					}
					has_intel_level = {
						who = FROM
						category = economy
						level >= 2
					}
				}
				add_opinion_modifier = { who = root.owner modifier = opinion_necrophage }
			}
			every_country = {
				limit = {
					has_communications = root.owner
					NOT = { is_country = root.owner }
					is_same_species = prev
					has_intel_level = {
						who = FROM
						category = economy
						level >= 1 #lower because you'd hear from a friend of a friend
					}
				}
				add_opinion_modifier = { who = root.owner modifier = opinion_necrophage_our_species }
			}
			kill_pop = yes
		}
		create_message = {
			type = MESSAGE_NECROPHAGE_POPS_NECROPHAGED
			localization = MESSAGE_NECROPHAGE_POPS_NECROPHAGED
			days = 30
			target = this
			variable = {
				type = name
				localization = PLANET
				scope = this
			}
			variable = {
				type = variable
				varname = var_necrophaged_pops
				localization = VALUE
				scope = this
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						has_active_tradition = tr_harmony_unity_of_self
						has_active_tradition = tr_synchronicity_unity_of_mind
					}
				}
			}
			owner = {
				add_monthly_resource_mult = {
					resource = unity
					value = 1.5
					min = 5
					max = 100
				}
			}
		}
		set_variable = {
			which = var_necrophaged_pops
			value = 0
		}
	}
}

# Assigns station aging.
event = {
	id = planetarystations_action.8
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		every_galaxy_planet = {
			limit = {
				has_planet_flag = planetary_station
				is_colony = no
				NOT = { has_planet_flag = new_planet_station }
			}
			add_modifier = {
				modifier = "station_deterioration"
				days = 1800
			}
			planet_event = { id = planetarystations_action.9 days = 1800 }
		}
	}
}

# The station became dilapidated and was demolished
planet_event = {
	id = planetarystations_action.9
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_planet_flag = planetary_station
		is_colony = no
		NOT = { has_planet_flag = new_planet_station }
		has_modifier = station_deterioration
	}

	immediate = {
		destroy_planetary_station = yes
	}
}

# The station is functioning again
planet_event = {
	id = planetarystations_action.10
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_planet_flag = planetary_station
		is_colony = yes
		has_modifier = station_deterioration
	}

	immediate = {
		remove_modifier = station_deterioration
	}
}

